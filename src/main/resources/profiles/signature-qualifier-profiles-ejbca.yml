profiles:
  # The name of the profile. Must match the name of one of the existing signature qualifier profiles
  - name: eu_eidas_qes
    # CA name to issue the certificate
    caName: DemoCA
    # End entity profile name to use for the certificate
    endEntityProfileName: DemoDocumentSigningEndEntityProfile
    # Certificate profile name to use for the certificate
    certificateProfileName: DemoDocumentSigningEECertificateProfile
    # Certificate validity period in ISO 8601 duration format
    # See https://en.wikipedia.org/wiki/ISO_8601#Durations for more information
    certificateValidity: P1D
    # Certificate validity offset in ISO 8601 duration format
    # See https://en.wikipedia.org/wiki/ISO_8601#Durations for more information
    certificateValidityOffset: PT-1M
    # Signature algorithm the CSR will be signed with to request the certificate. The signature algorithm
    # must be supported by the crypto token. See the documentation of the crypto token for supported
    # signature algorithms.
    csrSignatureAlgorithm: SHA256withRSA
    # A number equal or higher to 1 representing the maximum number of signatures that can be created
    # with a credential with a single authorization request.
    # For example, if the value is 5, the credential based on this profile can sign up to 5 documents
    # within a single request.
    multisign: 5
    # Username pattern to create username
    # You can use placeholders in the patterns, e.g. $[AccessToken.name] will be replaced with the
    # claim value of the `name` attribute in the access token
    # The claim values and other placeholder information is taken from:
    # - the access token that is provided in the Authorization header, in this case the placeholder
    #   has to be in the form $[AccessToken.<claim>]
    # - the user info that is retrieved from the IDP UserInfo endpoint, in this case the placeholder
    #   has to be in the form $[UserInfo.<claim>]
    # - the Signature Activation Data (SAD) token that is provided in the request body or
    #   Authorization header, in this case the placeholder has to be in the form $[Sad.<claim>]
    # - the Credential that is representing the credential of the user, currently only the id is available,
    #   in this case the placeholder has to be in the form $[Credential.id] and it will be replaced with the
    #   alias of the key pair that is used for signing
    usernamePattern: $[UserInfo.name] $[Credential.id] $[Sad.clientData] $[AccessToken.sub]
    # DN pattern to create subject DN of requested certificate
    dn:
      pattern: CN=$[UserInfo.name], UID=$[Credential.id]
      required:
        - CN
        - UID
    # SAN pattern to create subject alternative name of requested certificate
    san:
      pattern: null
      required: null
